digraph G{
rankdir=LR
edge[color=white]
Node0[shape=record, label =" <index0> index 0 | { Prev 36  | Node type is UNKNOWN. Data: nothing | <next0> Next 1 } " ];
Node0->Node1;
Node1[shape=record, label =" <index1> index 1 | { Prev 0  | Node type is WORD. Data: define | <next1> Next 2 } " ];
Node1->Node2;
Node2[shape=record, label =" <index2> index 2 | { Prev 1  | Node type is WORD. Data: main | <next2> Next 3 } " ];
Node2->Node3;
Node3[shape=record, label =" <index3> index 3 | { Prev 2  | Node type is BRACKET. Data: ( | <next3> Next 4 } " ];
Node3->Node4;
Node4[shape=record, label =" <index4> index 4 | { Prev 3  | Node type is BRACKET. Data: ) | <next4> Next 5 } " ];
Node4->Node5;
Node5[shape=record, label =" <index5> index 5 | { Prev 4  | Node type is BRACKET. Data: { | <next5> Next 6 } " ];
Node5->Node6;
Node6[shape=record, label =" <index6> index 6 | { Prev 5  | Node type is WORD. Data: var | <next6> Next 7 } " ];
Node6->Node7;
Node7[shape=record, label =" <index7> index 7 | { Prev 6  | Node type is WORD. Data: pivo | <next7> Next 8 } " ];
Node7->Node8;
Node8[shape=record, label =" <index8> index 8 | { Prev 7  | Node type is OPERATOR. Data: ; | <next8> Next 9 } " ];
Node8->Node9;
Node9[shape=record, label =" <index9> index 9 | { Prev 8  | Node type is WORD. Data: scanf | <next9> Next 10 } " ];
Node9->Node10;
Node10[shape=record, label =" <index10> index 10 | { Prev 9  | Node type is BRACKET. Data: ( | <next10> Next 11 } " ];
Node10->Node11;
Node11[shape=record, label =" <index11> index 11 | { Prev 10  | Node type is WORD. Data: pivo | <next11> Next 12 } " ];
Node11->Node12;
Node12[shape=record, label =" <index12> index 12 | { Prev 11  | Node type is BRACKET. Data: ) | <next12> Next 13 } " ];
Node12->Node13;
Node13[shape=record, label =" <index13> index 13 | { Prev 12  | Node type is OPERATOR. Data: ; | <next13> Next 14 } " ];
Node13->Node14;
Node14[shape=record, label =" <index14> index 14 | { Prev 13  | Node type is WORD. Data: drink | <next14> Next 15 } " ];
Node14->Node15;
Node15[shape=record, label =" <index15> index 15 | { Prev 14  | Node type is BRACKET. Data: ( | <next15> Next 16 } " ];
Node15->Node16;
Node16[shape=record, label =" <index16> index 16 | { Prev 15  | Node type is WORD. Data: pivo | <next16> Next 17 } " ];
Node16->Node17;
Node17[shape=record, label =" <index17> index 17 | { Prev 16  | Node type is BRACKET. Data: ) | <next17> Next 18 } " ];
Node17->Node18;
Node18[shape=record, label =" <index18> index 18 | { Prev 17  | Node type is OPERATOR. Data: ; | <next18> Next 19 } " ];
Node18->Node19;
Node19[shape=record, label =" <index19> index 19 | { Prev 18  | Node type is BRACKET. Data: } | <next19> Next 20 } " ];
Node19->Node20;
Node20[shape=record, label =" <index20> index 20 | { Prev 19  | Node type is WORD. Data: define | <next20> Next 21 } " ];
Node20->Node21;
Node21[shape=record, label =" <index21> index 21 | { Prev 20  | Node type is WORD. Data: drink | <next21> Next 22 } " ];
Node21->Node22;
Node22[shape=record, label =" <index22> index 22 | { Prev 21  | Node type is BRACKET. Data: ( | <next22> Next 23 } " ];
Node22->Node23;
Node23[shape=record, label =" <index23> index 23 | { Prev 22  | Node type is WORD. Data: pivo | <next23> Next 24 } " ];
Node23->Node24;
Node24[shape=record, label =" <index24> index 24 | { Prev 23  | Node type is BRACKET. Data: ) | <next24> Next 25 } " ];
Node24->Node25;
Node25[shape=record, label =" <index25> index 25 | { Prev 24  | Node type is BRACKET. Data: { | <next25> Next 26 } " ];
Node25->Node26;
Node26[shape=record, label =" <index26> index 26 | { Prev 25  | Node type is WORD. Data: pivo | <next26> Next 27 } " ];
Node26->Node27;
Node27[shape=record, label =" <index27> index 27 | { Prev 26  | Node type is OPERATOR. Data: = | <next27> Next 28 } " ];
Node27->Node28;
Node28[shape=record, label =" <index28> index 28 | { Prev 27  | Node type is NUMBER. Data: 0 | <next28> Next 29 } " ];
Node28->Node29;
Node29[shape=record, label =" <index29> index 29 | { Prev 28  | Node type is OPERATOR. Data: ; | <next29> Next 30 } " ];
Node29->Node30;
Node30[shape=record, label =" <index30> index 30 | { Prev 29  | Node type is WORD. Data: printf | <next30> Next 31 } " ];
Node30->Node31;
Node31[shape=record, label =" <index31> index 31 | { Prev 30  | Node type is BRACKET. Data: ( | <next31> Next 32 } " ];
Node31->Node32;
Node32[shape=record, label =" <index32> index 32 | { Prev 31  | Node type is WORD. Data: pivo | <next32> Next 33 } " ];
Node32->Node33;
Node33[shape=record, label =" <index33> index 33 | { Prev 32  | Node type is BRACKET. Data: ) | <next33> Next 34 } " ];
Node33->Node34;
Node34[shape=record, label =" <index34> index 34 | { Prev 33  | Node type is OPERATOR. Data: ; | <next34> Next 35 } " ];
Node34->Node35;
Node35[shape=record, label =" <index35> index 35 | { Prev 34  | Node type is BRACKET. Data: } | <next35> Next 36 } " ];
Node35->Node36;
Node36[shape=record, label =" <index36> index 36 | { Prev 35  | Node type is TERMINATED. Data: nothing | <next36> Next 0 } " ];
Node36->Node37;
Node37[shape=record, label =" <index37> index 37 | { Prev -1  | Node type is UNKNOWN. Data: nothing | <next37> Next -38 } " ];
Node37->Node38;
Node38[shape=record, label =" <index38> index 38 | { Prev -1  | Node type is UNKNOWN. Data: nothing | <next38> Next -39 } " ];
Node38->Node39;
Node39[shape=record, label =" <index39> index 39 | { Prev -1  | Node type is UNKNOWN. Data: nothing | <next39> Next -40 } " ];
edge[color=black]
Node1:<next1> -> Node2:<index2>;
Node2:<next2> -> Node3:<index3>;
Node3:<next3> -> Node4:<index4>;
Node4:<next4> -> Node5:<index5>;
Node5:<next5> -> Node6:<index6>;
Node6:<next6> -> Node7:<index7>;
Node7:<next7> -> Node8:<index8>;
Node8:<next8> -> Node9:<index9>;
Node9:<next9> -> Node10:<index10>;
Node10:<next10> -> Node11:<index11>;
Node11:<next11> -> Node12:<index12>;
Node12:<next12> -> Node13:<index13>;
Node13:<next13> -> Node14:<index14>;
Node14:<next14> -> Node15:<index15>;
Node15:<next15> -> Node16:<index16>;
Node16:<next16> -> Node17:<index17>;
Node17:<next17> -> Node18:<index18>;
Node18:<next18> -> Node19:<index19>;
Node19:<next19> -> Node20:<index20>;
Node20:<next20> -> Node21:<index21>;
Node21:<next21> -> Node22:<index22>;
Node22:<next22> -> Node23:<index23>;
Node23:<next23> -> Node24:<index24>;
Node24:<next24> -> Node25:<index25>;
Node25:<next25> -> Node26:<index26>;
Node26:<next26> -> Node27:<index27>;
Node27:<next27> -> Node28:<index28>;
Node28:<next28> -> Node29:<index29>;
Node29:<next29> -> Node30:<index30>;
Node30:<next30> -> Node31:<index31>;
Node31:<next31> -> Node32:<index32>;
Node32:<next32> -> Node33:<index33>;
Node33:<next33> -> Node34:<index34>;
Node34:<next34> -> Node35:<index35>;
Node35:<next35> -> Node36:<index36>;
"head: 1" -> Node1:<index1>
Node36:<index36> -> "tail: 36"
"free: 37" -> Node37:<index37>
"size: 36""capacity: 40"}